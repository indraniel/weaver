// Code generated by go-bindata.
// sources:
// views/base.html
// Rscripts/install-packages.r
// Rscripts/knit.r
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x7f\x6f\xe3\x34\x18\xfe\x7b\xfb\x14\xc6\xa0\xcb\x26\x96\x38\x1b\x77\x80\xba\xa6\x27\xd8\x38\x06\xda\x74\x27\xd6\x93\x80\x31\x9d\xdc\xc4\x4d\xbc\x73\xec\xc8\x76\xdb\x55\xd3\xfe\xe7\x53\xf0\xe1\xf8\x24\xbc\x8e\x13\xda\xae\x35\x02\x04\x67\x29\x8a\x7f\x3d\x7e\x9f\xe7\xf5\xeb\xd7\x1e\x7e\x74\xfe\xfa\x6c\xfc\xd3\x9b\x6f\x50\x65\x6b\x31\xda\x1f\xba\x1f\x12\x54\x96\x19\x66\x12\x8f\xf6\x11\x94\x61\xc5\x68\xe1\xab\x6d\xb3\x66\x96\xa2\xbc\xa2\xda\x30\x9b\xe1\xb7\xe3\x57\xf1\x97\x18\x91\xb5\x09\x82\xcb\xf7\x48\x33\x91\x61\x2a\x2c\xd3\x92\x5a\x86\x91\x5d\x36\x0c\x3a\x9a\x46\xf0\x9c\x5a\xae\x24\xd1\xc6\x7c\x7a\x5f\x0b\x18\xe2\x56\xc0\xd8\x0f\xd7\xd7\x18\x55\x9a\x4d\x33\x5c\x59\xdb\x0c\x08\x59\x2c\x16\x49\x4d\x75\xae\x12\xa5\x4b\x37\x7f\xd3\x4e\x4b\x44\xd2\x1a\xb0\x73\xce\x16\x8d\xd2\x16\xa3\x5c\x49\xcb\x24\x10\x5b\xf0\xc2\x56\x59\xc1\xe6\x3c\x67\x71\xdb\x38\x42\x5c\x72\xcb\xa9\x88\x4d\x4e\xc1\xe2\x71\x92\x86\x88\x1b\xbb\x14\xcc\x54\x8c\xd9\x9e\xb9\x65\xf7\x96\xe4\x8e\xc2\x8a\xa2\x01\x8e\x25\xb7\x79\x21\x13\x07\x25\x9a\x35\x8a\x70\x59\x68\x2a\x39\x13\x64\xc1\xe8\x9c\x69\x32\x4f\x93\x34\xf9\x8c\x50\x03\xfe\x32\xc4\x58\x50\x9f\x13\x5e\x30\xc7\x83\x4a\x93\xe4\x4f\x75\xb5\x34\x5a\x2b\x51\xe7\x88\x29\x88\x32\x49\xa9\x54\x29\x18\x6d\x38\x60\x54\xed\xc8\xbc\x9c\xd2\x9a\x8b\x65\xf6\x9d\x04\xd9\x46\x09\x6a\xe9\xe0\x79\x9a\x1e\x7d\x91\xa6\x51\x2b\x24\x5a\x09\x89\xbc\x90\xa8\x17\x12\xfd\x7f\xc2\xeb\x22\x96\xca\xb2\xd8\x2a\x25\x8c\xd3\x7f\x9c\x9c\xb8\x25\x1c\xa6\x9a\x4d\xe2\x8a\x97\x95\x80\xcf\x06\xb4\x6f\x31\xf9\x4f\x5c\x3e\xe1\xe5\x54\x29\x1b\x17\x6c\x4a\x67\xc2\xdb\xfe\x40\xa6\xfd\x82\x5b\x16\xdb\xc0\x1f\x3d\x3c\xa0\x64\xec\x6a\xe8\xf1\x71\x48\x7c\xdf\xbe\x3f\x79\x64\x75\xf4\x86\x13\x55\x2c\xd7\xb0\x05\x9f\x23\x5e\x64\xb8\xa6\xc6\xba\x59\x13\x9a\xbf\x2f\xb5\x9a\xc9\x02\x8f\x9e\xc9\x89\x69\x4e\x87\x04\xe6\xac\x10\x2b\xa8\x61\xb9\x3b\x80\x2d\xbc\x51\xc6\x1a\xdc\xd9\x0b\x2e\x8e\x47\x1b\xe3\x3e\x2b\x1c\x6f\x77\xb6\x03\xb4\xf3\xd9\xc7\xf8\x89\x34\x1a\x00\x98\x86\x7a\x32\x96\xcb\x25\x9d\xa8\x99\x3b\xc6\x02\x3c\x98\xe1\x29\x7d\x27\x95\xae\xa9\xd8\xc1\xa0\x2f\x5e\xed\xb3\xc9\x4c\x88\xd3\x5e\xb9\x5b\x72\x07\x67\xb2\x8b\xf4\xf6\xb4\xa6\x65\x53\x30\x93\x6b\xde\x38\x57\x85\xac\x7b\xa3\xc8\xc9\x7c\x43\x35\xad\x4d\x72\x5d\x41\x16\x3a\x5f\x21\x41\x78\x37\x6b\x07\x9b\x66\x73\xd9\x6e\xc3\x9e\xec\x05\xd5\x10\x41\x2e\x24\xb6\xf0\x6e\x67\x98\x0e\x38\xb5\x09\x3b\xec\xf7\x5f\x7f\xdb\x16\xdd\x97\x33\xcd\x20\x5f\x17\x03\x17\x9d\x35\x43\x05\x34\x5c\x25\x8b\x9c\xc8\x73\x68\x25\xaf\xdc\x86\x58\x84\x4f\xd2\xf4\xf3\x38\x3d\x8e\xd3\x93\xf1\xf1\x8b\x41\xfa\x7c\x90\xbe\xf8\x19\x83\xde\x08\x35\xb3\x89\xc3\x41\x74\xf9\x8a\x0f\x84\x00\x18\x77\x61\x5f\xef\x90\xd8\x97\x80\x07\xfb\xf2\xb6\x29\xc2\x9c\xbb\xc1\x7f\x4d\x3b\x8c\xff\x3b\xcc\x83\xbe\xde\xda\x7d\xdf\x19\xda\x53\xc7\xe4\x62\x7c\x75\xf9\x35\x64\x01\x30\xfb\x24\x6e\x82\x31\xd2\x97\xfd\xbd\xbd\xbd\x8d\xf6\x06\xde\xa5\x45\xa6\x51\x9b\xa5\x7c\xc2\x8f\x29\xe4\x67\x39\x40\x39\x5c\xa5\x4c\x9f\x06\xe2\x1f\x82\x0c\xf4\xed\x54\xd2\x0d\x07\x09\x7d\xcb\x24\xd3\xce\xaf\x68\xb2\x0c\x4e\xfa\x33\x95\xac\xa5\x5f\xb8\x3f\xda\xdb\xef\x69\xe2\xc5\x23\xff\x0f\xa7\x99\xed\xe3\xe6\x75\xaf\x25\x3f\x48\x1c\x3e\x37\xae\xf7\xf9\xb3\xbc\x7e\x1b\xde\xc7\x10\x09\xd5\x1d\xbd\x8f\xe1\xda\x9d\xf2\x72\xc3\x3d\x57\x30\xf4\x3d\xbd\x4f\x2e\x80\xe8\x59\x3b\x7c\xf0\xb0\x45\x08\x96\x39\x01\xfc\x00\x3d\x70\x09\x97\x09\x73\xa0\x01\xba\xb9\x89\x3e\x89\x8e\xe0\xbb\x3d\x42\x37\xd1\x2f\x50\x0e\xa0\xe9\xfe\x87\xd1\xed\xed\xfa\xa6\x3f\x1e\x9e\xae\x93\x6e\x19\x8e\xfe\x8a\xf2\x1d\x9d\x53\xdf\x8b\x37\xc8\x18\x9d\xaf\xdc\xeb\xae\xb6\x4e\x59\xfb\xe2\xea\xea\x04\xde\x15\xcc\x58\xd2\x2b\xbb\x33\x2f\xbd\xee\x6c\xcc\x7e\x8c\xbf\xba\xba\x8e\xaf\xae\x2e\xdf\xb9\xe8\x54\x1a\x6a\x6b\xde\x08\x53\xdb\xb0\xfb\x4f\x9f\x12\x77\x86\xac\x9e\x10\x0d\x5c\x7c\x40\x09\x07\xd4\x8e\x82\x1c\x46\x95\xb8\x33\x89\x7b\x12\x5e\xf4\x8b\x71\x59\xbe\x96\x97\x8a\x16\x07\x87\xa7\x9b\xb8\x21\xf1\xf7\x2f\x9c\xd0\xf6\xa5\xfc\x47\x00\x00\x00\xff\xff\xab\xde\xd8\x14\x3a\x0b\x00\x00")

func viewsBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseHtml,
		"views/base.html",
	)
}

func viewsBaseHtml() (*asset, error) {
	bytes, err := viewsBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base.html", size: 2874, mode: os.FileMode(436), modTime: time.Unix(1468864926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rscriptsInstallPackagesR = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x5b\x6f\xdc\x36\x13\x7d\xdf\x5f\xc1\x28\x30\x56\x02\xbc\x94\xd7\xce\x0d\x1f\x3e\x15\xc8\xed\xa1\x45\x9a\x04\xeb\xa4\x2f\x86\x11\x70\x25\xae\xc4\x2e\x45\xb2\x24\xb5\xce\xa6\xc9\x7f\xef\x90\xba\xab\x71\x92\x5a\x09\x60\x44\x14\x67\x0e\x0f\xcf\x0c\xa9\x99\xbd\x7f\x2f\xae\x8c\x8e\xb7\x4c\xc4\x54\x1c\xd0\xc6\xa4\x9a\x29\xbb\x58\x2c\xee\xa3\x9d\x96\x25\x2a\xac\x55\xe6\x7f\x71\x9c\x33\x63\x71\xce\x6c\x51\x6d\x71\x2a\xcb\xf8\xc0\xf6\x4c\xe4\xf1\xfa\xe1\xd9\xc5\xe3\x8b\x47\x0b\x26\x8c\x25\x9c\x63\x45\xd2\x3d\xc9\x29\x3e\x50\x6d\x98\x14\xe8\xff\x2b\xb4\xab\x44\x6a\xe1\x39\x5c\x20\xd4\x4c\x9f\xc2\x63\x6b\x91\xa0\xd7\xef\x5f\xbd\x72\x6f\x34\x55\xd2\xc0\x38\xa7\xf6\x8d\xf2\x1e\x4b\xff\x6a\x19\xb9\x59\x7b\x54\x74\x34\x19\xa8\x7d\xfe\x0e\x5e\x06\x51\xb4\xf8\x1b\x0c\x52\x29\xac\x66\xdb\x4a\x73\xb7\x6a\x33\xc2\x30\x0c\x3d\xca\xa9\x47\x88\xc0\x90\x1c\x08\xe3\x64\xcb\xa9\xb3\xeb\x06\x2d\x75\x13\xf6\x40\xce\x9a\xed\x50\xd8\x4c\xa1\x13\x26\x4e\x90\x96\x37\x58\x90\x12\x0c\x3b\xdf\x28\x42\x8e\x01\x70\xa8\xb4\xa6\xc2\x0e\xb7\xdf\x19\x5d\xb5\x9b\x47\xcb\x3f\xea\xe9\xe5\xb5\x77\x72\x2b\x30\x83\x45\xc5\x79\xd8\x38\x46\xe8\xf3\xe7\x5e\xa1\x64\x8a\xdb\x2e\x07\xbe\x63\xdd\x4d\xd8\x2d\xd2\xaa\xd9\x6c\x7e\xa0\x4e\x32\x18\x9c\xb6\xba\xb6\xe2\xb8\x7f\x9a\xda\x4a\x8b\xb0\x1e\x7e\x59\xb8\xbf\x5a\x5f\xb7\x9f\xfc\x13\x3c\x84\x4e\x56\xa3\x34\x13\x76\x17\x06\x27\x26\x36\x3a\x8d\x1b\xd4\xf8\x77\x6a\x49\x4c\x74\x5a\xb0\x03\xc5\x3a\x33\x41\x43\x26\x3a\x45\x81\xde\xba\x70\x41\x0c\xea\x69\x07\xa8\x29\xc9\x36\x2f\x2e\x9d\xec\x6e\x26\xe5\xd2\xd0\x7a\xd0\xa8\x7f\x6f\xac\x7f\xa3\x7d\x0d\x10\x75\xd2\x1b\x2b\x55\x4f\x29\x95\x15\xcf\xc4\xd2\xa2\x1d\x13\x59\x9b\x76\x68\x79\x62\x96\xc0\xa6\x19\x7a\x22\x6e\x7b\x4c\xec\xa4\x0f\x55\x8d\x79\xd5\x46\xea\xfa\x7a\x98\x2d\xd3\xdc\x36\x9e\xbc\xbc\xa9\xf9\x38\x8c\x8e\xf1\x34\x9a\x2d\xc7\xfb\xe8\xb7\xca\x58\x94\x6b\xb2\x45\xb6\xa0\x88\x13\x4b\x61\x2c\x05\xc5\xe8\x5d\xc1\x0c\xba\x61\x9c\xc3\x90\x1f\x51\x41\x94\xa2\xc2\xa1\x39\xc3\x66\xe9\x06\xa4\x20\x06\x6d\x29\xcc\x2a\x58\x84\x66\xf5\x41\x7d\xbe\x79\xfa\x1a\x7b\x83\x96\xa7\x22\xb6\x70\x1c\x1d\xb5\x2b\x4e\x45\x6e\x8b\x9a\xa6\xdb\xd6\x17\x44\xb9\xa1\x0d\xaf\xa9\x87\x22\xc6\xd2\x3e\x95\x82\xb8\x17\x0d\x46\x1f\x60\xd4\xec\x0c\x46\xd8\x12\x8d\xf3\x4f\xf0\xce\x50\x95\x04\x41\xd4\xe5\x74\x17\xb7\x1a\xd7\x07\xef\x76\x35\xa3\x3e\xa9\xc7\xa1\x6c\x8f\x81\x0b\x1e\x02\x8d\x98\x38\x10\xce\x60\xd7\x52\x4f\x03\xdb\xb1\x1a\x46\xb8\x4d\xe1\x7e\x9b\xcd\x15\x71\x5b\xfe\x3e\xad\xd3\x20\x3e\xe9\x32\xf7\x74\xa4\x90\xbf\x15\x6e\x39\x77\xd8\x9f\xa9\xf6\xec\xb9\x9b\x2d\x5a\x7c\x71\x97\xe9\xa5\x25\x22\x23\x3a\x6b\x3d\x17\xc6\x66\xb8\x79\x1e\xdd\x92\xb5\x0c\xff\xc2\x0f\xf6\x82\x59\xdd\x12\x4a\x02\x77\x2f\xc3\xb5\x9c\x6a\x22\xf0\x0d\x24\x15\xc7\x34\xab\x82\xaf\x52\x0b\xf4\x9f\x46\x8a\xbb\xb9\xe6\xb9\xe2\xd2\x9e\xdf\xc1\x19\x7c\x35\xcb\x5e\x7e\xb4\x9a\xdc\x6d\x69\xa9\xac\x22\xda\xd0\xef\x7b\x7b\x81\xdf\x32\x21\x68\x2f\xaf\xf2\xc3\x1f\x57\xb8\xcd\xc3\x30\x28\x59\x49\xfb\x5c\x4a\x82\x33\x7c\x71\x87\x0d\xf4\x78\x06\x92\x4a\xe4\x6c\x0c\xf9\x70\xf5\x70\x16\x68\x49\x40\x5d\xeb\x13\xa2\x43\x5d\xe3\x79\x98\x14\xce\x55\x05\x37\xd2\x98\xe9\x63\x7c\x97\xe8\xf7\xa8\x19\x83\x68\xda\x31\xe6\x23\xfc\x64\x16\x26\x1c\xfd\x92\xd8\xcd\x78\xf3\xf3\x68\x16\x2c\x2f\xf4\x24\x46\x33\x23\xa4\xf7\x19\x7c\x1d\xa6\x6a\x3e\xfe\x09\xc9\x34\x09\xfb\x19\x3e\x9b\x05\x7a\x24\x25\x1f\x22\x9e\xe3\x35\x5e\xcf\x4b\xfa\xf6\xb6\x1a\xb0\x5c\xaf\x67\x21\xb6\x97\xd8\x40\x4c\xe0\x39\x2f\x46\xa9\xe4\x52\x1b\x78\x4d\x27\xa9\xb4\x7a\x34\x0b\x77\x93\x2a\x35\xa6\xba\x3e\x9f\x19\xa3\xcd\x73\xc7\xf5\x99\xa6\x37\x74\xaa\xeb\x6a\xee\x01\x4d\x0b\x28\x20\x88\x1d\xa7\xc0\xd9\x6a\x1e\xe1\xb2\x12\x86\x72\x3e\x96\xe1\xc1\xcc\x53\x0a\xa5\x03\xe5\x70\x00\x7e\xe6\xfd\xac\xf8\x71\xa2\xe8\x93\x99\x88\xb9\x75\x15\xce\x24\x01\x66\xee\x5c\x53\x03\x25\x21\x3d\x1f\x33\x7d\x80\xe7\x1d\x2a\x93\x12\x4e\xcd\xf4\x54\xcd\x3b\x54\x4a\x4b\x2b\x27\x01\x5a\xad\xe7\x25\x53\x5f\x86\x8c\xae\xbd\x79\x9b\x1f\xd6\x27\xc3\xc4\x9f\x79\x52\xa1\x43\x85\xd2\x65\x72\xa1\xcc\x05\x1d\x14\x43\x03\xd8\x8b\x1f\x41\xf5\xd5\x51\xd3\x69\x64\xf4\x40\xb9\x54\x25\xf4\x92\x88\x66\xcc\xfa\x36\x66\xb5\x42\x25\x39\x22\x21\x2d\x34\x5f\x94\xb8\xee\xa3\xad\xa2\xc0\xfe\xbf\x14\xa9\x4b\xb0\xb7\x52\x72\xb3\xfc\x81\xbd\x72\xb6\xd5\x44\x1f\xc3\xd6\x67\xb0\xff\x0f\xf5\x0f\x0d\xf0\x65\x62\x45\xc5\xe2\xbe\xf4\xdd\x25\xf0\x5d\x85\xde\x44\x07\x5f\xb3\x86\x5c\xfe\x98\x6e\x63\xff\xa5\x88\xfb\xa2\xf7\xdb\x4e\x05\xc9\x38\x3d\xc6\xc3\x42\xf7\xdb\x0e\x5b\xa2\x2c\x83\xd9\xd8\xe5\x0f\xed\xea\xdb\x6f\x3b\x59\x4d\x0f\x52\xf3\x2c\x1e\x55\xb5\x43\x1f\x1f\x26\xd7\x9e\xb9\xd2\xc6\xb5\xc6\x19\x33\x8a\x93\xe3\xa2\xf9\xbf\x8d\x83\xf9\x4a\x20\x32\xa6\xdd\xdb\xcb\xa3\xc1\x90\x7d\x54\x1c\xc2\x14\xbe\x18\x1f\x5e\xfd\xfa\xec\xb2\x6e\xb7\xd5\x3e\x37\x75\x2b\xe8\x31\xa0\x30\xee\x62\x06\x61\xc0\x5c\xa6\x09\x60\x78\x4b\xd7\x13\x85\xce\xfe\xea\x14\x40\xde\xd6\x66\xc0\x36\x68\x7e\xb4\x70\x8f\x2f\x28\xf4\xa6\xd0\xd8\x47\xd7\x9e\x37\xd1\x35\x7a\x2a\xcb\x12\xba\x9c\xa7\x30\x0c\x41\x16\xe6\x6e\xea\x37\x90\x4e\xc9\xbb\xcd\xfb\x97\xd0\x1c\xbb\xa6\xd0\xdb\x26\x09\x0a\x20\xec\x41\xcd\xbe\x5e\x32\x58\xad\x7e\x41\x6f\xa9\x76\x02\x80\x1f\x22\xc8\x65\xd3\xb2\xa5\xec\x55\x1d\xa4\x63\x08\x2b\xd7\x2d\xec\x08\xb5\x2e\xfb\xbf\x07\x5c\x5b\x8d\xb1\xc7\x0d\xc3\x2d\xf0\xa6\xe9\xe2\xbe\xb7\x40\x6b\x37\x5e\x62\xd0\xf2\xf5\xf8\x03\x9c\x17\xd2\xfd\x62\xb1\x17\xf2\x06\x15\xf0\x67\x65\xeb\x7d\xcf\xbb\xff\x55\x31\x1b\x1a\x72\xa0\x49\x20\xdc\x05\x0b\x53\xb6\x32\xc9\xda\xc7\x20\x25\x10\x35\xdf\xb6\x07\x2e\xe4\xd3\xa4\x81\xf5\xfe\x09\x00\x00\xff\xff\x61\x7d\x0d\x0d\xea\x13\x00\x00")

func rscriptsInstallPackagesRBytes() ([]byte, error) {
	return bindataRead(
		_rscriptsInstallPackagesR,
		"Rscripts/install-packages.r",
	)
}

func rscriptsInstallPackagesR() (*asset, error) {
	bytes, err := rscriptsInstallPackagesRBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Rscripts/install-packages.r", size: 5098, mode: os.FileMode(509), modTime: time.Unix(1468863878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rscriptsKnitR = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x41\x6b\xdc\x3c\x10\xbd\xeb\x57\xe8\xd3\x06\x56\x06\xef\x06\xbe\x63\xa8\x0f\x85\x12\xe8\x25\x29\xa5\xb7\x34\x18\xad\x3d\xb6\x45\x6c\xc9\x8c\xb4\xbb\xd9\x7f\xdf\x19\xd9\xde\x35\x4d\xe9\xa5\xbe\x18\x6b\xde\xcc\x7b\x7a\x6f\xbc\xf9\xef\xfe\x18\xf0\xfe\x60\xdd\x3d\xb8\x93\xfc\x1e\x2a\xb4\x63\x14\xa2\xb7\x07\x34\x78\xd1\xd1\xfb\x3e\x64\xd7\x4f\x3f\xc6\xd1\x60\x80\xdb\xc9\x9b\xb3\x11\x33\x21\xa8\x12\xf6\xbd\x0d\x51\x7e\xda\x49\x7e\x6b\x21\xe9\x19\xcc\x1b\x94\x54\xb3\xde\xe9\x4a\xab\x9d\x57\xb9\x54\xbb\x9d\x3f\xc6\xda\xa2\xca\x72\x69\x2a\xae\x15\x2a\x44\x8f\x40\xc5\xd4\xb5\x7e\xe2\x65\x84\x42\x55\x9d\x41\x82\x02\x12\xa4\x86\xc6\x1c\xfb\x58\xa8\xc6\x3a\xd3\xab\xfc\x43\x4b\x07\xfd\x58\xa8\x1f\x1d\x48\xe2\x19\x8f\x51\x12\x17\x54\x44\x70\x91\xd1\xcb\xb1\x37\x15\xc8\x48\xd5\xc6\xb6\x47\x84\x20\x5f\xe6\x89\x0f\x72\x9b\x46\x6e\x5f\x49\x99\xf8\xa3\x7e\x3b\xe9\xb7\x8e\xc6\xfe\xa3\xfc\xa7\xcf\x7f\x53\x9e\x18\x88\x1e\xdf\x6a\x7f\x76\x24\xb5\x87\x24\x1e\x7d\x05\x21\xa8\x4c\xcc\x9e\xb3\xdd\x29\x92\xd2\x60\x1b\xf4\x73\x92\xfa\x8d\x0f\x50\x4f\xba\x4b\x4e\xa3\xb8\xe6\x93\x51\x63\x65\xa2\x1e\x4d\x88\xa0\xd5\xd7\xc4\xf3\x48\xe3\x1f\x24\x89\x63\xd8\x5d\xe2\xa6\x7b\xfe\x74\x8a\xd0\x2b\xf0\xf3\x64\xe7\x63\xf2\x4d\x7e\x59\x5c\xbd\x75\x4e\xb9\x5e\x5b\x93\xc2\x92\x57\xe4\x2e\x40\xd4\x07\x13\x60\x4f\xf5\x62\x85\xcd\xe4\x46\xf2\x39\x67\x24\xcf\x1d\x60\xba\x66\x30\xa7\x6b\x3c\x42\x6c\xe4\x08\xd8\x78\x1c\x52\x6a\x08\xae\x06\xb4\xae\x15\xd6\x9d\x6c\xb0\x87\x1e\xd2\x16\xea\x9b\x76\xa6\xde\xc8\xc1\x9f\xa6\x9c\xe7\x2d\x58\x3c\xec\x3d\x5d\x89\x8c\x91\xbe\x99\xca\x68\x5b\x8e\x7d\xf6\xfc\xba\x2c\x82\x75\xb1\x2c\xb2\x98\x5e\xce\x0c\xb0\xe6\x10\xdc\xc7\xc6\x71\x9d\xa1\x1f\x00\xe8\x7d\x7c\xa2\x43\x06\x30\x79\x39\x9a\xd8\x95\xc1\xb8\x50\xc2\x3b\xe9\x9d\xfb\x33\x31\xd4\xcb\x9c\xc9\xe8\xa5\x31\x97\xdb\xfd\x50\x6f\x73\x19\x80\xd6\x82\x42\x17\x3c\x26\x2c\xbf\xd8\x3e\x7d\xe9\x16\xe2\xb9\xd6\x74\x67\x4b\xc6\xbc\x73\xb1\x45\x18\xf5\x34\x34\x4f\xcc\x21\x5b\x99\x95\xb6\x8e\x4f\xf7\x38\x69\xbe\xad\x61\x83\x7e\x28\x52\x89\xa5\x2e\x93\xe7\x19\x2f\x69\xfe\x6b\xb6\x5a\xdb\xe8\x57\xe8\xd9\xae\xdf\xd0\x09\x9c\xd6\x75\xc3\x29\xfd\xdf\xc5\xa1\xd7\x4d\xba\xf6\xaf\x00\x00\x00\xff\xff\xb6\xe2\xd5\xfd\x7d\x04\x00\x00")

func rscriptsKnitRBytes() ([]byte, error) {
	return bindataRead(
		_rscriptsKnitR,
		"Rscripts/knit.r",
	)
}

func rscriptsKnitR() (*asset, error) {
	bytes, err := rscriptsKnitRBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Rscripts/knit.r", size: 1149, mode: os.FileMode(509), modTime: time.Unix(1468863878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/base.html": viewsBaseHtml,
	"Rscripts/install-packages.r": rscriptsInstallPackagesR,
	"Rscripts/knit.r": rscriptsKnitR,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Rscripts": &bintree{nil, map[string]*bintree{
		"install-packages.r": &bintree{rscriptsInstallPackagesR, map[string]*bintree{}},
		"knit.r": &bintree{rscriptsKnitR, map[string]*bintree{}},
	}},
	"views": &bintree{nil, map[string]*bintree{
		"base.html": &bintree{viewsBaseHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

