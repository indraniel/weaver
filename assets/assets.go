// Code generated by go-bindata.
// sources:
// views/base.html
// Rscripts/install-packages.r
// Rscripts/knit.r
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xed\x6e\xe4\x34\x14\xfd\xbd\x7d\x0a\x63\xd0\xa6\x15\x4d\x9c\x56\xbb\x80\xa6\x33\xb3\x82\x96\xa5\xa0\x56\xbb\xa2\xb3\x12\x50\xaa\x95\x27\xf1\x24\xee\x3a\x76\x64\x7b\xbe\x54\xf5\x3f\x4f\xc1\xc3\xf1\x24\x5c\xc7\x09\x33\xd3\x8c\xd1\x0a\x01\x1e\x8d\xe2\xaf\xe3\x7b\xce\xf5\xf5\xb5\x87\x9f\x5c\xbc\x39\x9f\xfc\xfc\xf6\x5b\x54\xda\x4a\x8c\x0f\x86\xee\x83\x04\x95\xc5\x08\x33\x89\xc7\x07\x08\xca\xb0\x64\x34\xf7\xd5\xa6\x59\x31\x4b\x51\x56\x52\x6d\x98\x1d\xe1\x77\x93\xd7\xf1\x57\x18\x91\xad\x09\x82\xcb\x0f\x48\x33\x31\xc2\x54\x58\xa6\x25\xb5\x0c\x23\xbb\xae\x19\x74\xd4\xb5\xe0\x19\xb5\x5c\x49\xa2\x8d\xf9\x7c\x55\x09\x18\xe2\x56\xc0\xd8\x8f\x37\x37\x18\x95\x9a\xcd\x46\xb8\xb4\xb6\x1e\x10\xb2\x5c\x2e\x93\x8a\xea\x4c\x25\x4a\x17\x6e\xfe\xae\x9d\x86\x88\xa4\x15\x60\x17\x9c\x2d\x6b\xa5\x2d\x46\x99\x92\x96\x49\x20\xb6\xe4\xb9\x2d\x47\x39\x5b\xf0\x8c\xc5\x4d\xe3\x18\x71\xc9\x2d\xa7\x22\x36\x19\x05\x8b\x27\x49\x1a\x22\x6e\xec\x5a\x30\x53\x32\x66\x3b\xe6\x96\xad\x2c\xc9\x1c\x85\x0d\x45\x03\x1c\xb3\x5c\x26\x9a\x2e\x0b\x6e\x93\x4c\x55\x84\xcb\x5c\x53\xc9\x99\x20\x4b\x46\x17\x4c\x93\x45\x9a\xc0\x8f\x50\x03\xde\x32\xc4\x58\xd0\x9e\x11\x9e\x33\xc7\x82\x4a\x93\x64\x4f\x55\x35\x24\x1a\x1b\x51\xeb\x86\x19\x48\x32\x49\xa1\x54\x21\x18\xad\xb9\x69\x0c\x01\xee\xd5\x8c\x56\x5c\xac\x47\xdf\x4b\x10\x6d\x94\xa0\x96\x0e\x5e\xa4\xe9\xf1\x97\x69\x1a\x35\x32\xa2\x8d\x8c\xc8\xcb\x88\x3a\x19\xd1\x7f\x25\xbb\xca\x63\xa9\x2c\x8b\xad\x52\xc2\x38\xf5\x27\xc9\xa9\x5b\x80\xc0\xd4\x72\x3e\x8d\x4b\x5e\x94\x02\xfe\x36\xa0\xbc\xc7\xe3\x5f\x70\xf7\x94\x17\x33\xa5\x6c\x9c\xb3\x19\x9d\x0b\x6f\xf9\x7f\x31\xec\x97\xeb\xd9\x6b\x02\x7e\xfc\xf0\x80\x92\x89\xab\xa1\xc7\xc7\x21\xf1\x7d\x07\xfe\xc4\x91\xcd\x91\x1b\x4e\x55\xbe\xde\xc2\xe6\x7c\x81\x78\x3e\xc2\x15\x35\xd6\xcd\x9a\xd2\xec\x43\xa1\xd5\x5c\xe6\x78\xfc\x5c\x4e\x4d\x7d\x36\x24\x30\x67\x83\xd8\x40\x0d\xcb\xdc\xc1\x6b\xe0\xb5\x32\xd6\xe0\xd6\x5e\x70\x71\x3c\xde\x19\xf7\xd9\xe0\xa4\xdf\xd9\x0c\xd0\xd6\x63\x9f\xe2\x27\xd2\x68\x00\x60\x6a\xea\xc9\x58\x2e\xd7\x74\xaa\xe6\xee\xf8\x0a\xf0\xe0\x08\xcf\xe8\x7b\xa9\x74\x45\xc5\x1e\x06\x5d\xf1\x6a\x9f\x4f\xe7\x42\x9c\x75\xca\xdd\x92\x7b\x38\x93\x7d\xa4\xfb\xd3\xea\x86\x4d\xce\x4c\xa6\x79\xed\x5c\x15\xb2\xee\x8d\x22\x27\xf3\x2d\xd5\xb4\x32\xc9\x4d\x09\xd9\xe7\x62\x83\x04\xe1\xed\xac\x3d\x6c\xea\xdd\x65\xdb\x0d\x7b\xb2\x17\x54\x43\x04\xb9\x90\xe8\xe1\xdd\xce\x30\x1d\x70\x6a\x1d\x76\xd8\x1f\xbf\xfd\xde\x17\xdd\x95\x73\xcd\x20\x4f\xe7\x03\x17\x9d\x15\x43\x39\x34\x5c\x65\x14\x39\x91\x17\xd0\x4a\x5e\xbb\x0d\xb1\x08\x9f\xa6\xe9\x17\x71\x7a\x12\xa7\xa7\x93\x93\x97\x83\xf4\xc5\x20\x7d\xf9\x0b\x06\xbd\x11\xaa\xe7\x53\x87\x83\xe8\xf2\x15\x1f\x08\x01\x30\x6e\xc3\xbe\xda\x23\xb1\x2b\x01\x0f\x76\xe5\x5d\x9d\x87\x39\xb7\x83\xff\x98\x76\x18\xff\x31\xcc\x83\xbe\xee\xed\xbe\xef\x0c\xed\xa9\x63\x72\x39\xb9\xbe\xfa\x06\xb2\x00\x98\x7d\x12\x37\xc1\x18\xe9\xca\xc1\xb3\x67\xcf\x76\xda\x3b\x78\x97\x14\x99\x46\x4d\x96\xf2\xa9\x3e\xa6\x90\x9b\xe5\x00\x65\x70\x85\x32\x7d\x16\x88\x7f\x08\x32\xd0\xb7\x57\x49\x3b\x1c\x24\xf4\x1d\x93\x4c\x3b\xbf\xa2\xe9\x3a\x38\xe9\xaf\x54\xd2\x25\x5f\x7f\x77\xec\x4d\xbc\x78\xec\xbf\xe1\x34\xd3\x3f\x6e\x5e\xf7\x56\xf2\x83\xc4\xe1\x73\xe3\x76\x9f\x3f\xcb\xdb\xf7\xe0\x2a\x86\x48\x28\xef\xe9\x2a\x86\x0b\x77\xc6\x8b\x1d\xf7\x5c\xc3\xd0\x0f\x74\x95\x5c\x02\xd1\xf3\x66\xf8\xf0\xa1\x47\x08\x96\x39\x05\xfc\x00\x3d\x70\x09\xb7\x0e\x73\xa0\x01\xba\xbd\x8d\x3e\x8b\x8e\xe1\x7f\x77\x8c\x6e\xa3\x5f\xa1\x1c\x42\xd3\x7d\x8f\xa2\xbb\xbb\xed\x4d\x7f\x3c\x3a\xdb\x26\xdd\x30\x1c\xff\x1d\xe5\x7b\xba\xa0\xbe\x17\xef\x90\x31\x3a\xdb\xbd\xdb\x5a\x65\xcd\x4b\xab\xad\x13\x78\x51\x30\x63\x49\xa7\xec\xde\xbc\xf2\xba\x47\x13\xf6\x53\xfc\xf5\xf5\x4d\x7c\x7d\x7d\xf5\xde\x45\xa7\xd2\x50\xdb\xf2\x46\x98\x5a\xcf\xee\xc7\x3f\x22\xee\x0d\xd9\x3c\x1e\x6a\xb8\xf6\x80\x10\x0e\x68\x1d\x07\x19\x8c\x4b\x71\x6f\x12\xf7\x10\xbc\xec\x16\xe3\xb2\x78\x23\xaf\x14\xcd\x0f\x8f\xce\x76\x71\x43\xe2\x6f\x5f\x38\x9f\xcd\xfb\xf8\xcf\x00\x00\x00\xff\xff\x83\x54\x9e\x7e\x30\x0b\x00\x00")

func viewsBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseHtml,
		"views/base.html",
	)
}

func viewsBaseHtml() (*asset, error) {
	bytes, err := viewsBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base.html", size: 2864, mode: os.FileMode(436), modTime: time.Unix(1440102614, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _rscriptsInstallPackagesR = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xed\x6f\xdb\xb6\x13\xfe\xee\xbf\x82\x55\x11\x58\x06\x62\x2a\x4e\xfa\x86\x1f\x7e\x1a\xd0\x97\x7d\xd8\xd0\xb5\x85\xd3\xee\x4b\x10\x14\xb4\x44\x4b\x9c\x29\x92\x23\x29\x67\xee\xda\xff\x7d\x47\x4a\xb4\x5e\xd6\xb4\x59\xd4\x02\x41\x45\xe9\xee\xe1\xc3\xe7\x8e\xe7\xbb\x87\x0f\x92\xda\xe8\x64\xc3\x44\x42\xc5\x1e\xad\x4d\xa6\x99\xb2\xb3\xd9\xec\x21\xda\x6a\x59\xa1\xd2\x5a\x65\xfe\x97\x24\x05\x33\x16\x17\xcc\x96\xf5\x06\x67\xb2\x4a\xf6\x6c\xc7\x44\x91\xac\x1e\x9f\x5d\x3c\xbd\x78\x32\x63\xc2\x58\xc2\x39\x56\x24\xdb\x91\x82\xe2\x3d\xd5\x86\x49\x81\xfe\xbf\x44\xdb\x5a\x64\x16\x9e\xe3\x19\x42\xed\xe7\x53\x78\x0c\x16\x29\x7a\xf3\xe1\xf5\x6b\xf7\x46\x53\x25\x0d\xac\x0b\x6a\xdf\x2a\xef\x31\xf7\xaf\xe6\x0b\xf7\xd5\x1e\x14\x1d\x7c\x8c\xd4\xae\x78\x0f\x2f\xa3\xc5\x62\xf6\x37\x18\x64\x52\x58\xcd\x36\xb5\xe6\x6e\xd7\x76\x85\x61\x19\x7b\x94\x53\x8f\xb0\x00\x43\xb2\x27\x8c\x93\x0d\xa7\xce\xee\xb8\x08\xd4\x4d\xdc\x01\x39\x6b\xb6\x45\x71\xfb\x09\x9d\x30\x71\x82\xb4\xbc\xc1\x82\x54\x60\x78\xf4\x5d\x2c\x90\x63\x00\x1c\x6a\xad\xa9\xb0\xfd\xe3\x1f\x8d\xae\xc2\xe1\xd1\xfc\xf7\xe6\xf3\xfc\xda\x3b\xb9\x1d\x98\xc1\xa2\xe6\x3c\x6e\x1d\x17\xe8\xf3\xe7\x4e\xa1\x74\x8c\x1b\xb6\x03\xdf\xa1\xee\x26\x3e\x6e\x12\xd4\x6c\x0f\xdf\x53\x27\xed\x2d\x4e\x83\xae\x41\x1c\xf7\x4f\x53\x5b\x6b\x11\x37\xcb\x2f\x33\xf7\xd7\xe8\xeb\xce\x53\x7c\x82\x87\xd8\xc9\x6a\x94\x66\xc2\x6e\xe3\xe8\xc4\x24\x46\x67\x49\x8b\x9a\xfc\x46\x2d\x49\x88\xce\x4a\xb6\xa7\x58\xe7\x26\x6a\xc9\x2c\x4e\x51\xa4\x37\x2e\x5c\x10\x83\xe6\xb3\x03\xd4\x94\xe4\xeb\x57\x97\x4e\x76\xf7\x25\xe3\xd2\xd0\x66\xd1\xaa\xff\x60\xa8\x7f\xab\x7d\x03\xb0\x38\x4a\x6f\xac\x54\x1d\xa5\x4c\xd6\x3c\x17\x73\x8b\xb6\x4c\xe4\x21\xed\xd0\xfc\xc4\xcc\x81\x4d\xbb\xf4\x44\xdc\xf1\x98\xd8\x4a\x1f\xaa\x06\xf3\x2a\x44\xea\xfa\xba\x9f\x2d\xe3\xdc\x36\x9e\xbc\xbc\x69\xf8\x38\x8c\x23\xe3\x71\x34\x03\xc7\x87\xe8\xd7\xda\x58\x54\x68\xb2\x41\xb6\xa4\x88\x13\x4b\x61\x2d\x05\xc5\xe8\x7d\xc9\x0c\xba\x61\x9c\xc3\x92\x1f\x50\x49\x94\xa2\xc2\xa1\x39\xc3\x76\xeb\x16\xa4\x24\x06\x6d\x28\x7c\x55\xb0\x09\xcd\x9b\x8b\xfa\x72\xfd\xfc\x0d\xf6\x06\x81\xa7\x22\xb6\x74\x1c\x1d\xb5\x2b\x4e\x45\x61\xcb\x86\xa6\x3b\xd6\x17\x44\xb9\xa1\x2d\xaf\xb1\x87\x22\xc6\xd2\x2e\x95\xa2\xa4\x13\x0d\x56\x1f\x61\xd5\x9e\x0c\x56\xd8\x12\x8d\x8b\x4f\xf0\xce\x50\x95\x46\xd1\xe2\x98\xd3\xc7\xb8\x35\xb8\x3e\x78\xb7\xab\xb9\xe8\x92\x7a\x18\xca\x70\x0d\x5c\xf0\x10\x68\xc4\xc4\x9e\x70\x06\xa7\x96\x7a\x1c\xd8\x23\xab\x7e\x84\x43\x0a\x77\xc7\x6c\x4b\xc4\x6d\xf9\xfb\xbc\x49\x83\xe4\xe4\x98\xb9\xa7\x03\x85\x7c\x55\xb8\xe5\xde\x61\x7f\xa7\xc2\xdd\x73\x95\x6d\x31\xfb\xe2\x8a\xe9\xa5\x25\x22\x27\x3a\x0f\x9e\x33\x63\x73\xdc\x3e\x0f\xaa\x64\x23\xc3\xbf\xf0\xa3\x9d\x60\x56\x07\x42\x69\xe4\xea\x32\x94\xe5\x4c\x13\x81\x6f\x20\xa9\x38\xa6\x79\x1d\x7d\x95\x5a\xa4\xff\x30\x52\xdc\xcf\xb5\x28\x14\x97\xf6\xfc\x7e\xce\x52\x59\x45\xb4\xa1\xdf\xf7\xf6\x12\xbd\x63\x42\xd0\x4e\x20\xe5\x97\x77\xd7\x28\x64\x52\x1c\x55\xac\xa2\x5d\x36\xa4\xd1\x19\xbe\xb8\xc7\x01\x3a\x3c\x03\x69\x21\x0a\x36\x84\x7c\xbc\x7c\x3c\x09\xb4\x22\x85\x66\xd6\x87\xf4\x88\xba\xc2\xd3\x30\x29\xdc\x8c\x1a\x6a\xca\x90\xe9\x53\x7c\x9f\xf8\x75\xa8\x39\x83\x68\xda\x21\xe6\x13\xfc\x6c\x12\x26\x5c\xde\x8a\xd8\xf5\xf0\xf0\xd3\x68\x96\xac\x28\xf5\x28\x46\x13\x23\xa4\x77\x39\xd4\xf7\xb1\x9a\x4f\x7f\x40\x32\x8d\xc2\x7e\x86\xcf\x26\x81\x1e\x48\xc5\xfb\x88\xe7\x78\x85\x57\xd3\x92\x3e\xd4\x9b\x1e\xcb\xd5\x6a\x12\x62\x28\x43\x3d\x31\x81\xe7\xb4\x18\x65\x92\x4b\x6d\xe0\x35\x1d\xa5\xd2\xf2\xc9\x24\xdc\x75\xa6\xd4\x90\xea\xea\x7c\x62\x8c\xd6\x2f\x1d\xd7\x17\x9a\xde\xd0\xb1\xae\xcb\xa9\x17\x34\x2b\xa1\x05\x20\x76\x98\x02\x67\xcb\x69\x84\xab\x5a\x18\xca\xf9\x50\x86\x47\x13\x6f\x29\xfc\xf8\x53\x0e\x17\xe0\x47\xd6\x67\xc5\x0f\x23\x45\x9f\x4d\x44\x2c\xac\xeb\x51\x46\x09\x30\xf1\xe4\x9a\x1a\x68\xea\xe8\xf9\x90\xe9\x23\x3c\xed\x52\x99\x8c\x70\x6a\xc6\xb7\x6a\xda\xa5\x52\x5a\x5a\x39\x0a\xd0\x72\x35\x2d\x99\xba\x46\x62\x50\xf6\xa6\x1d\x1e\x86\x41\xe8\x31\x46\x37\x7f\x6a\x2d\xed\x75\x2d\x3d\xd8\x8b\xbb\xa0\xfa\x36\xa6\x6d\xea\x73\xba\xa7\x5c\xaa\x0a\xc6\x36\x44\x73\x66\xfd\xc4\xb0\x5c\xa2\x8a\x1c\x90\x90\x16\xe6\x1c\x4a\x5c\xa3\x1f\xda\x1d\xb0\xff\x2f\xfd\xe0\x1c\xec\xad\x94\xdc\xcc\xef\x70\x56\xce\x36\x9a\xe8\x43\x1c\x7c\x7a\xe7\xff\xd8\xcc\xf4\xf0\x13\xc2\xca\x9a\x25\x5d\x97\xb9\x4d\xe1\x07\x10\xc6\x00\x1d\x7d\xcd\x1a\x92\xee\xaf\x6c\x93\xf8\x92\x9e\x74\xfd\xe5\xb7\x9d\x4a\x92\x73\x7a\x48\xfa\x3d\xe5\xb7\x1d\xac\xa6\x7b\xa9\x79\x9e\x0c\x3a\xc9\xbe\x8f\x57\xdc\x0d\x35\xae\x9d\x70\x03\x65\xce\x8c\xe2\xe4\x30\x6b\xff\x0f\x92\x9a\xaf\x68\x9a\x33\xed\xde\x5e\x1e\x0c\x86\x44\xa2\x62\x1f\x67\x50\xa5\x3f\xbe\xfe\xe5\xc5\x65\x33\xa4\xaa\x5d\x61\x9a\x01\xca\x63\x40\x33\x7a\x94\x1f\x14\xc5\x5c\x66\x29\x60\x78\x4b\x37\x49\xc4\xce\xfe\xea\x14\x40\xde\x35\x66\xc0\x36\x6a\x47\x7d\xf7\xf8\x8a\xc2\x44\x07\xe3\xf0\xe2\xda\xf3\x26\xba\x41\xcf\x64\x55\xc1\x6c\xf0\x1c\x96\xb1\xd5\x30\x1e\x41\x75\x7c\x0b\x99\x91\xbe\x5f\x7f\xf8\x19\x46\x4a\x37\x4a\x79\xdb\x34\x45\x11\x44\x30\x6a\xd8\x37\x5b\x46\xcb\xe5\x4f\xe8\x1d\xd5\x4e\x00\xf0\x43\x04\xb9\xc4\x98\x07\xca\x5e\xd5\x5e\x66\xc1\x4c\xdf\x0e\x7e\x03\xd4\xa6\xd5\xfe\x1e\x70\x63\x35\xc4\x1e\x36\xe9\xb7\xc0\x9b\x76\xf6\xf9\xde\x06\xc1\x6e\xb8\x45\x6f\x50\xea\xf0\x7b\x38\xaf\xa4\x9b\xf3\x77\x42\xde\xa0\x12\xfe\xac\x0c\xde\x0f\xbc\xfb\x9f\x35\xb3\xb1\x21\x7b\x9a\x46\xc2\x15\x35\xf8\x64\x6b\x93\xae\x7c\x0c\x32\x02\x51\xf3\xc3\x6e\xe4\x42\x3e\x4e\x1a\xd8\xef\x9f\x00\x00\x00\xff\xff\xe2\x51\x06\x02\x20\x13\x00\x00")

func rscriptsInstallPackagesRBytes() ([]byte, error) {
	return bindataRead(
		_rscriptsInstallPackagesR,
		"Rscripts/install-packages.r",
	)
}

func rscriptsInstallPackagesR() (*asset, error) {
	bytes, err := rscriptsInstallPackagesRBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Rscripts/install-packages.r", size: 4896, mode: os.FileMode(509), modTime: time.Unix(1441323688, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _rscriptsKnitR = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x41\x6b\xdc\x3c\x10\xbd\xeb\x57\xe8\xd3\x06\x56\x06\xef\x06\xbe\x63\xa8\x0f\x85\x12\xe8\x25\x29\xa5\xb7\x34\x18\xad\x3d\xb6\x45\x6c\xc9\x8c\xb4\xbb\xd9\x7f\xdf\x19\xd9\xde\x35\x4d\xe9\xa5\xbe\x18\x6b\xde\xcc\x7b\x7a\x6f\xbc\xf9\xef\xfe\x18\xf0\xfe\x60\xdd\x3d\xb8\x93\xfc\x1e\x2a\xb4\x63\x14\xa2\xb7\x07\x34\x78\xd1\xd1\xfb\x3e\x64\xd7\x4f\x3f\xc6\xd1\x60\x80\xdb\xc9\x9b\xb3\x11\x33\x21\xa8\x12\xf6\xbd\x0d\x51\x7e\xda\x49\x7e\x6b\x21\xe9\x19\xcc\x1b\x94\x54\xb3\xde\xe9\x4a\xab\x9d\x57\xb9\x54\xbb\x9d\x3f\xc6\xda\xa2\xca\x72\x69\x2a\xae\x15\x2a\x44\x8f\x40\xc5\xd4\xb5\x7e\xe2\x65\x84\x42\x55\x9d\x41\x82\x02\x12\xa4\x86\xc6\x1c\xfb\x58\xa8\xc6\x3a\xd3\xab\xfc\x43\x4b\x07\xfd\x58\xa8\x1f\x1d\x48\xe2\x19\x8f\x51\x12\x17\x54\x44\x70\x91\xd1\xcb\xb1\x37\x15\xc8\x48\xd5\xc6\xb6\x47\x84\x20\x5f\xe6\x89\x0f\x72\x9b\x46\x6e\x5f\x49\x99\xf8\xa3\x7e\x3b\xe9\xb7\x8e\xc6\xfe\xa3\xfc\xa7\xcf\x7f\x53\x9e\x18\x88\x1e\xdf\x6a\x7f\x76\x24\xb5\x87\x24\x1e\x7d\x05\x21\xa8\x4c\xcc\x9e\xb3\xdd\x29\x92\xd2\x60\x1b\xf4\x73\x92\xfa\x8d\x0f\x50\x4f\xba\x4b\x4e\xa3\xb8\xe6\x93\x51\x63\x65\xa2\x1e\x4d\x88\xa0\xd5\xd7\xc4\xf3\x48\xe3\x1f\x24\x89\x63\xd8\x5d\xe2\xa6\x7b\xfe\x74\x8a\xd0\x2b\xf0\xf3\x64\xe7\x63\xf2\x4d\x7e\x59\x5c\xbd\x75\x4e\xb9\x5e\x5b\x93\xc2\x92\x57\xe4\x2e\x40\xd4\x07\x13\x60\x4f\xf5\x62\x85\xcd\xe4\x46\xf2\x39\x67\x24\xcf\x1d\x60\xba\x66\x30\xa7\x6b\x3c\x42\x6c\xe4\x08\xd8\x78\x1c\x52\x6a\x08\xae\x06\xb4\xae\x15\xd6\x9d\x6c\xb0\x87\x1e\xd2\x16\xea\x9b\x76\xa6\xde\xc8\xc1\x9f\xa6\x9c\xe7\x2d\x58\x3c\xec\x3d\x5d\x89\x8c\x91\xbe\x99\xca\x68\x5b\x8e\x7d\xf6\xfc\xba\x2c\x82\x75\xb1\x2c\xb2\x98\x5e\xce\x0c\xb0\xe6\x10\xdc\xc7\xc6\x71\x9d\xa1\x1f\x00\xe8\x7d\x7c\xa2\x43\x06\x30\x79\x39\x9a\xd8\x95\xc1\xb8\x50\xc2\x3b\xe9\x9d\xfb\x33\x31\xd4\xcb\x9c\xc9\xe8\xa5\x31\x97\xdb\xfd\x50\x6f\x73\x19\x80\xd6\x82\x42\x17\x3c\x26\x2c\xbf\xd8\x3e\x7d\xe9\x16\xe2\xb9\xd6\x74\x67\x4b\xc6\xbc\x73\xb1\x45\x18\xf5\x34\x34\x4f\xcc\x21\x5b\x99\x95\xb6\x8e\x4f\xf7\x38\x69\xbe\xad\x61\x83\x7e\x28\x52\x89\xa5\x2e\x93\xe7\x19\x2f\x69\xfe\x6b\xb6\x5a\xdb\xe8\x57\xe8\xd9\xae\xdf\xd0\x09\x9c\xd6\x75\xc3\x29\xfd\xdf\xc5\xa1\xd7\x4d\xba\xf6\xaf\x00\x00\x00\xff\xff\xb6\xe2\xd5\xfd\x7d\x04\x00\x00")

func rscriptsKnitRBytes() ([]byte, error) {
	return bindataRead(
		_rscriptsKnitR,
		"Rscripts/knit.r",
	)
}

func rscriptsKnitR() (*asset, error) {
	bytes, err := rscriptsKnitRBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Rscripts/knit.r", size: 1149, mode: os.FileMode(509), modTime: time.Unix(1440100323, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/base.html": viewsBaseHtml,
	"Rscripts/install-packages.r": rscriptsInstallPackagesR,
	"Rscripts/knit.r": rscriptsKnitR,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Rscripts": &bintree{nil, map[string]*bintree{
		"install-packages.r": &bintree{rscriptsInstallPackagesR, map[string]*bintree{
		}},
		"knit.r": &bintree{rscriptsKnitR, map[string]*bintree{
		}},
	}},
	"views": &bintree{nil, map[string]*bintree{
		"base.html": &bintree{viewsBaseHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

